# -*- coding: utf-8 -*-
"""Desafio04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hLKK9fbjlEVasuh-5SNv-2Yrqbsyt2wK

## **PARTE 1 - LIMPEZA E TRATAMENTO DE DADOS**

#####IMPORTAR BIBLIOTECAS E CARREGAR DADOS
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_excel('desafio4.xlsx')

df.head()

"""#####1 - ALTERAÇÃO DAS COLUNAS PARA LETRAS MINÚSCULAS"""

df.columns = df.columns.str.lower()

df.head()

"""#####2 - EXPLORE COLUNAS CATEGORICAS, UTILIZANDO FUNÇÃO ***groupby()*** E OUTRAS, VISANDO APLICAR OS GRÁFICOS PARA VISUALIZAÇÕES E A COMPREENSÃO DESSES DADOS"""

categorical_columns = ['estado', 'genero', 'possui cartao', 'ativo', 'saiu']

fig, axes = plt.subplots(2, 3, figsize=(18, 10))
axes = axes.flatten()
for i, col in enumerate(categorical_columns):
    sns.countplot(data=df, x=col, ax=axes[i])
    axes[i].set_title(f'Distribuição - {col}')
    axes[i].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

estado_churn = df.groupby(['estado', 'saiu']).size().unstack().fillna(0)
estado_churn_pct = estado_churn.div(estado_churn.sum(axis=1), axis=0) * 100
print(estado_churn_pct.round(2))

"""#####3 - EXPLORE COLUNAS NUMÉRICAS, UTILIZANDO A FUNÇÃO ***DESCRIBE()***, FAÇA UM BOXPLOT OU OUTRO GRÁFICO QUE ACHAR NECESSÁRIO, UTILIZANDO AS BIBLIOTECAS ***PANDAS*** E ***SEABORN***


"""

print(df.describe())

num_cols = ['pontos', 'idade', 'bens', 'saldo na conta', 'produtos', 'salario anual']

plt.figure(figsize=(15, 10))
for i, col in enumerate(num_cols):
    plt.subplot(2, 3, i + 1)
    sns.boxplot(x=df[col])
    plt.title(f'Boxplot - {col}')
plt.tight_layout()
plt.show()

"""#####4 - Corrigir os dados faltantes  ***(NANs)*** e preencher as lacunas com valores adequados."""

print(df.isnull().sum())

df['salario anual'].fillna(df['salario anual'].median(), inplace=True)

"""#####5 - Tratar os outliers, substituindo-os pelos valores adequados




"""

def tratar_outliers(coluna):
    Q1 = df[coluna].quantile(0.25)
    Q3 = df[coluna].quantile(0.75)
    IQR = Q3 - Q1
    limite_inferior = Q1 - 1.5 * IQR
    limite_superior = Q3 + 1.5 * IQR
    df[coluna] = np.where(df[coluna] < limite_inferior, limite_inferior,
                          np.where(df[coluna] > limite_superior, limite_superior, df[coluna]))

for col in num_cols:
    tratar_outliers(col)

"""#####6 - Eliminar os duplicados, para garantir a unicidade"""

print("Duplicados antes:", df.duplicated().sum())
df.drop_duplicates(inplace=True)
print("Duplicados depois:", df.duplicated().sum())

"""#####7 - Corrigir os dados categóricos, por exemplo, "Mas" para "Masculino", "Fem" para "Feminino" e outras inconsistências se houver, para adequá-los ao padrão"""

df['genero'] = df['genero'].str.strip().str.lower()
df['genero'] = df['genero'].replace({
    'mas': 'masculino',
    'fem': 'feminino',
    'm': 'masculino',
    'f': 'feminino'
})

print(df['genero'].value_counts())

"""#####8 - Mostre o tamanho dos dados importados, utilizando o shape"""

print("Tamanho do DataFrame (linhas, colunas):", df.shape)

"""##**PARTE 2 - ESTATISTICA**

#####1 - Apresente a média e a mediana do saldo na conta dos clientes abaixo de 40 anos
"""

menor_40 = df[df['idade'] < 40]
media_menor_40 = menor_40['saldo na conta'].mean()
mediana_menor_40 = menor_40['saldo na conta'].median()

print("Clientes com menos de 40 anos:")
print("Média do saldo na conta:", round(media_menor_40, 2))
print("Mediana do saldo na conta:", round(mediana_menor_40, 2))

"""#####2 - Apresente a média e a mediana do saldo na conta dos clientes acima de 40 anos"""

maior_40 = df[df['idade'] > 40]
media_maior_40 = maior_40['saldo na conta'].mean()
mediana_maior_40 = maior_40['saldo na conta'].median()

print("\nClientes com mais de 40 anos:")
print("Média do saldo na conta:", round(media_maior_40, 2))
print("Mediana do saldo na conta:", round(mediana_maior_40, 2))

"""#####3 - Apresente a média e a mediana do saldo na conta dos clientes que saíram e dos que permaneceram"""

saiu = df[df['saiu'] == 1]

ficou = df[df['saiu'] == 0]

print("\nClientes que saíram:")
print("Média do saldo na conta:", round(saiu['saldo na conta'].mean(), 2))
print("Mediana do saldo na conta:", round(saiu['saldo na conta'].median(), 2))

print("\nClientes que permaneceram:")
print("Média do saldo na conta:", round(ficou['saldo na conta'].mean(), 2))
print("Mediana do saldo na conta:", round(ficou['saldo na conta'].median(), 2))

"""#####4 - Dos que saíram, mostre qual é o público predominante ***(Masculino ou Feminino)***, a idade, o saldo na conta, patrimônio e os seus respectivos estados"""

genero_pred = saiu['genero'].value_counts().idxmax()

idade_media = saiu['idade'].mean()

saldo_medio = saiu['saldo na conta'].mean()

bens_medio = saiu['bens'].mean()

estado_pred = saiu['estado'].value_counts().idxmax()

print("\nPerfil predominante entre os que saíram:")
print("Gênero:", genero_pred.capitalize())
print("Idade média:", round(idade_media, 1))
print("Saldo médio na conta:", round(saldo_medio, 2))
print("Patrimônio médio (bens):", round(bens_medio, 2))
print("Estado mais frequente:", estado_pred)

media_saldo_estado = df[df['saiu'] == 1].groupby('estado')['saldo na conta'].mean().sort_values(ascending=False)

plt.figure(figsize=(8, 6))
sns.barplot(x=media_saldo_estado.index, y=media_saldo_estado.values, palette='viridis')
plt.title('Média do Saldo na Conta por Estado (Clientes que Saíram)')
plt.ylabel('Saldo Médio (R$)')
plt.xlabel('Estado')
plt.show()